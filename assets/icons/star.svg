import 'dart:ui';
import 'package:alero/utils/constants.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:intl/intl.dart';

class MyBalanceSheetTableContainer extends StatelessWidget {
  final balanceSheetData;
  final String bankDate;
  final String selectedDate;

  const MyBalanceSheetTableContainer({this.balanceSheetData, this.bankDate, this.selectedDate});

  @override
  Widget build(BuildContext context) {
    DateTime startDate = DateTime.now();
    String currentStartDate = DateFormat('yyyy-MM-dd')
        .format(DateTime.parse(DateTime(startDate.year, startDate.month, startDate.day - 1).toString()));
    String selectedStartDate = '2023/07/17';

    String monthEdDate = '2023/06/30';
    return
      /*FutureBuilder(
        builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.none &&
          snapshot.hasData == null && snapshot.connectionState == ConnectionState.waiting) {
        return ShimmerLoadingWidget();
      }
      return status.isEmpty ?
      Padding(
        padding: const EdgeInsets.only(top: 10.0),
        child: Container(
          alignment: Alignment.topLeft,
          padding: EdgeInsets.only(left: 6, top: 5),
          height: 30,
          color: Colors.grey.shade300,
          child: Text("You do not have any monthly report details yet.",
            style: TextStyle(
              fontSize: 12, fontWeight: FontWeight.bold,
              color: Colors.black54,
            ),
          ),
        ),
      ) :*/
      Padding(
        padding: const EdgeInsets.only(right: 3.0),
        child: Column(
          children: [
            Container(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: DataTable(
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.all(Radius.circular(10))
                  ),
                  // horizontalMargin: 5.0,
                  headingRowColor: MaterialStateProperty.all(Colors.grey.shade300),
                  columns: [
                    DataColumn(label: Text('Category')),
                    DataColumn(label: Text(selectedDate ?? bankDate + '("₦\'m)')),
                    /*DataColumn(label: Text(selectedStartDate + '("₦\'m)' ?? currentStartDate + '("₦\'m)')),
                    DataColumn(label: Text('DTD Variance ("₦\'m)')),
                    DataColumn(label: Text(monthEdDate + '("₦\'m)')),
                    DataColumn(label: Text('MTD Variance ("₦\'m)')),
                    DataColumn(label: Text('Budget ("₦\'m)')),
                    DataColumn(label: Text('Variance From Budget ("₦\'m)')),
                    DataColumn(label: Text('Achievement % ("₦\'m)', style: kDealsHeading)),*/
                    // ], rows: [],
                  ], rows: List.generate(balanceSheetData.length, (index) {
                  return DataRow(cells: [
                    DataCell(Text(balanceSheetData[index].product == "Demand_Deposits" ? 'CURRENT'
                        : balanceSheetData[index].product == "Savings_Deposits" ? 'SAVINGS'
                        : balanceSheetData[index].product == "Term_Deposits" ? 'TIME'
                        : balanceSheetData[index].product == "Dom_Deposits" ? 'DOM'
                        : balanceSheetData[index].product == "CASA_Dom_Deposits" ? 'CASA_DOM'
                        : 'Total Deposit',
                        style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.parent)),
                    DataCell(Text(balanceSheetData[index].currentBalance.toString(), style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.longestLine,)),
                    /*DataCell(Text(balanceSheetData[index].previousBal.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].variance.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].monthEndBalance.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].varianceFromMonthEnd.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].budget, style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].varianceFromBudget, style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].achievementPercent.toString(), style: kDealsBlueHeading)),*/
                  ]);}
                ),
                ) ?? DataTable(
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.all(Radius.circular(10))
                  ),
                  // horizontalMargin: 5.0,
                  headingRowColor: MaterialStateProperty.all(Colors.grey.shade300),
                  columns: [
                    DataColumn(label: Text('Category')),
                    balanceSheetData[index].product == 
                    DataColumn(label: Text('Total Deposit')),
                    DataColumn(label: Text('Total Liabilities')),
                    DataColumn(label: Text('Total Loan')),
                    DataColumn(label: Text(selectedDate ?? bankDate + '("₦\'m)')),
                    /*DataColumn(label: Text(selectedStartDate + '("₦\'m)' ?? currentStartDate + '("₦\'m)')),
                    DataColumn(label: Text('DTD Variance ("₦\'m)')),
                    DataColumn(label: Text(monthEdDate + '("₦\'m)')),
                    DataColumn(label: Text('MTD Variance ("₦\'m)')),
                    DataColumn(label: Text('Budget ("₦\'m)')),
                    DataColumn(label: Text('Variance From Budget ("₦\'m)')),
                    DataColumn(label: Text('Achievement % ("₦\'m)', style: kDealsHeading)),*/
                    // ], rows: [],
                  ], rows: List.generate(balanceSheetData.length, (index) {
                  return DataRow(cells: [
                    DataCell(Text(balanceSheetData[index].product, style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.parent)),
                    DataCell(Text(balanceSheetData[index].currentBalance.toString(), style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.longestLine,)),
                    DataCell(Text('100000', style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.longestLine,)),
                    DataCell(Text('200000', style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.longestLine,)),
                    DataCell(Text('300000', style: kDealsHeaderStyle, textWidthBasis: TextWidthBasis.longestLine,)),
                    /*DataCell(Text(balanceSheetData[index].previousBal.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].variance.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].monthEndBalance.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].varianceFromMonthEnd.toString(), style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].budget, style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].varianceFromBudget, style: kDealsHeaderStyle)),
                    DataCell(Text(balanceSheetData[index].achievementPercent.toString(), style: kDealsBlueHeading)),*/
                  ]);}
                ),
                ),
              ),
            ),
          ],
        ),
      );
}}
