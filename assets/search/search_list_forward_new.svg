import 'dart:ui';
import 'package:alero/models/performance/MyBalanceSheetReponse.dart';
import 'package:alero/models/performance/MyBalanceSheetRmResponse.dart';
import 'package:alero/models/performance/MyBalanceSheetTypeResponse.dart';
import 'package:alero/network/AleroAPIService.dart';
import 'package:alero/screens/alero/performance/pm_title_container.dart';
import 'package:eva_icons_flutter/eva_icons_flutter.dart';
import 'package:flutter/painting.dart';
import 'package:flutter_svg/svg.dart';
import 'package:intl/intl.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:one_context/one_context.dart';
import 'balance_sheet_side_menu.dart';
import 'balance_sheet_table_container.dart';
import 'package:alero/style/theme.dart' as Style;

class MyBalanceSheetPage extends StatefulWidget {
  final String regionId;

  const MyBalanceSheetPage({this.regionId});

  @override
  State<MyBalanceSheetPage> createState() => _MyBalanceSheetPageState();
}

class _MyBalanceSheetPageState extends State<MyBalanceSheetPage> with TickerProviderStateMixin {
  // If data is empty or Json date is an empty list.

  var apiService = AleroAPIService();
  String regionType;
  String segmentType;
  Function selectDate;

  // ACTUAL OR AVERAGE
  /// TODO
  bool isReportValue = false;
  bool hasLoaded = false;
  bool hasdata;
  List reportOnSearch = [];
  bool isRegion = false;

  List<MyBalanceSheetResponse> balanceSheet = [];
  List<MyBalanceSheetResponse> bankWideDepositActual = [];
  List<MyBalanceSheetResponse> bankWideLoanActual = [];
  List<MyBalanceSheetResponse> segmentBankWide = [];

  List<MyBalanceSheetResponse> bankWideDepAvg = [];
  List<MyBalanceSheetResponse> getBankWideLoanAvg = [];
  List<MyBalanceSheetResponse> avgSegmentBankWide = [];

  List<MyBalanceSheetTypeResponse> regionActual = [];
  List<MyBalanceSheetTypeResponse> areaActual = [];
  List<MyBalanceSheetTypeResponse> branchActual = [];

  List<MyBalanceSheetTypeResponse> regionAvg = [];
  List<MyBalanceSheetTypeResponse> areaAvg = [];
  List<MyBalanceSheetTypeResponse> branchAvg = [];

  List<MyBalanceSheetRmResponse> rmActual = [];
  List<MyBalanceSheetRmResponse> rmAvg = [];
  List<MyBalanceSheetRmResponse> avgSegmentRm = [];
  List<MyBalanceSheetRmResponse> actualSegmentRegion = [];
  List<MyBalanceSheetRmResponse> actualSegmentArea = [];
  List<MyBalanceSheetRmResponse> actualSegmentBranch = [];
  List<MyBalanceSheetRmResponse> avgSegmentRegion = [];
  List<MyBalanceSheetRmResponse> avgSegmentArea = [];
  List<MyBalanceSheetRmResponse> avgSegmentBranch = [];


  DateTime startDate = DateTime.now();
  String selectedDate;
  String bankDate = DateFormat('yyy-MM-dd').format(DateTime.now());
  bool visible = true;
  bool isNotVisible = false;

  Future<Null> _selectDate(BuildContext context) async {
    DateTime _datePicker = await showDatePicker(
        context: context,
        initialDate: startDate,
        firstDate: DateTime(1990),
        lastDate: DateTime(2050)
    );
    if (_datePicker != null && DateFormat('dd/MM/yyyy').format(_datePicker) != selectedDate) {
      setState(() {
        selectedDate = _datePicker.toIso8601String();
      });
    }}

  List<dynamic> count = [];
  void toggleData(bool value) {
    if(mounted) {
      setState(() {
        isReportValue = value;
        // getBankActualOrAverageForDeposit('2023-05-06');
        // getBankActualOrAverageForLoan('2023-05-06');
      });
    }
  }

  List<String> regionList = [
    'HEAD OFFICE',
    'SOUTH',
    'NORTH 1',
    'NORTH 2',
    'NORTH 3',
    'LAGOS AND SOUTHWEST',
    'CORPORATE BANKING GROUP',
    'TREASURY',
  ];

  List<String> regionLis;
  // List<String> regionList;
  getRegionList() async {
    List<String> _regionList = await apiService.getRegionList();
    setState(() {
      regionLis = _regionList;
    });
  }

  List<String> segmentList = [
    'CORPORATE',
    'RETAIL',
    'COMMERCIAL',
    'SME',
    'PUBLIC SECTOR',
    'UNTAGGED',
  ];

  List<String> segmentLis;
  // List<String> segmentList;
  getSegmentList() async {
    List<String> _segmentList = await apiService.getProspectBusinessSegments();
    setState(() {
      segmentLis = _segmentList;
    });
  }

/*onSelectedItemChanged: (value) {
  setState(() {
    if(isBusinessSeg) {
      businessSegment = businessSegments[value];
    }else{
      prospectType = businessSegments[value];
    }
  });

 print('The bank segments =  ${bankSegments.result}');
*/

// TREASURY, RETAIL, COMMERCIAL, CORPORATE, SME
  // The bank segments =  [Result{segment: RETAIL}, Result{segment: SME}, Result{segment: TREASURY}, Result{segment: COMMERCIAL}, Result{segment: CORPORATE}]
// [{"indexId":0,"location":"HEAD OFFICE","locationCode":"HE001"},{"indexId":1,"location":"SOUTH","locationCode":"SO001"},{"indexId":2,"location":"NORTH 1","locationCode":"NO001"},{"indexId":3,"location":"NORTH 2","locationCode":"NO002"},{"indexId":4,"location":"NORTH 3","locationCode":"NO003"},{"indexId":5,"location":"LAGOS AND SOUTHWEST","locationCode":"LS001"},{"indexId":6,"location":"CORPORATE BANKING GROUP","locationCode":"CBG001"},{"indexId":7,"location":"TREASURY","locationCode":"TRE001"}]

  List<String> areaByRegion = [ // if region is South
    'IMO',
    'DELTA',
    'EDO',
    'ENUGU',
    'ONITSHA 1',
    'ONITSHA 2',
    'PORT HARCOURT 1',
    'PORT HARCOURT 2',
    'UYO',
  ];

  List<String> areaByRegio = [ // if region is North 1
      'ABUJA 2',
      'ABUJA 3',
      'BAUCHI/GOMBE/TARABA',
      'BORNO/YOBE/ADAMAWA',
    ];

  List<String> areaByRegi;
  getAreaListByRegionId(String regionId) async {
    List<String> _areaList = await apiService.getAreaByRegionId(regionId);
    setState(() {
      areaByRegi = _areaList;
    });
  } // getAreaListByRegionId(regionLis.locationCode);



  List<String> branchByArea = [ // if area is IMO
    'ALABA INTL MKT, IMO',
    'ABOH MBAISE',
    'ABA MAIN',
    'UMUOCHAM',
    'OHAFIA',
    'ORLU',
    'DOUGLAS RD, OWERRI',
    'IKENEGBU LAYOUT OKIGWE',
    'UMUAHIA',
    'AROCHUKWU',
    'UMUDIKE',
    'ARIARIA',
    '2ND OWERRI',
    'ABA MARKET',
    'NGWA ROAD ABA',
    'OKIGWE',
    'FACTORY ROAD, ABA',
  ];

  List<String> branchByAre = [ // if area is Abuja 2
    'KUBWA',
    'KARU',
    'BIDA',
    'GWARIMPA',
    'WUSE II ABUJA',
    'NASS ABUJA',
  ];

  List<String> branchByAr;
    getBranchListByAreaCode(String areaCode) async {
      List<String> _branchList = await apiService.getBranchByAreaCode(areaCode);
      setState(() {
        branchByAr = _branchList;
      });
    } // getBranchListByAreaCode(areaByRegion.areaCode);


  List<String> rmByBranch = [ // if branch is ALABA INTL MKT, IMO
    'Tchukwu Ihejirika',
    'Linda Ezurike',
    'Chukwuemeka Ohajunwa',
    'Uochukwu Ebirim',
    'Chamberline Nwaeme',
  ];

  List<String> rmByBranc = [ // if branch is KUBWA
    'Shola Meseru',
    'Elochukwu Okoye',
    'Okpanachi Ekele',
    'Simileoluwa Adeleye',
    'Kenneth Idrisu',
    'Kenneth Shindong',
    'Daniel Godwin',
    'Lucky Okhihie',
    'Ogbogbo Efeagwolo',
    'Isah Adama',
    'Aliyu Ademu',
    'Ocheje Meliga',
    'Joy Okafor',
    'Omeneke Okikiri',
    'Abayomi Adekunle',
    'Ichukwu Joseph',
    'Goodness Garuba',
  ];

  List<String> rmByBran;
      getRmByBranchCode(String branchCode) async {
        List<String> _rmList = await apiService.getRmByBranchCode(branchCode);
        setState(() {
          rmByBran = _rmList;
        });
      } // getBranchListByAreaCode(branchByArea.branchCode);

  /* String date = '2023-05-06';
  String segment = 'sme'; use 'SME'
  String segmentId = ' ';
  String regionId = 'SO001';
  String area = 'DELTA';
  String zoneId = 'IMO001';
  String branch = 'ORLU';
  String rmCode = 'WFG12537'; '5428883'- (working well)
  String regionCode = 'SO001';
  "areaName": "ABUJA 2",
  "areaId" or String areaCode: "IMO001", // For corporate "CBG001"
  String branchCode = '259'; '010';
  String runDate = '';
  categoryDescription = regionName = 'HEAD OFFICE' or 'SOUTH'
*/

  AnimationController controller;
  Animation animation1;
  Animation animation2;

  @override
  void initState() {
    super.initState();
    active = false;
    isActive = true;
    // All date here is fine, do not alter
    // OneContext().showProgressIndicator();
    getBankWideDepositActualData('2023-05-06');
    // OneContext().hideProgressIndicator();
    getBankWideLoanActualData('2023-05-06');
    // getRegionActualData('2023-05-06', 'HEAD OFFICE');
    // getAreaActualData('SO001', 'DELTA', '2023-05-06');
    // getBranchActualData('IMO001', 'ORLU', '2023-05-06');
    // getRmActualData('5428883', '2023-05-06');
    getBankWideDepositAvgData('2023-05-06');
    // getRegionAvgData('SO001');
    // getAreaAvgData('SO001', 'DELTA', '2023-05-06');
    // getBranchAvgData('IMO001', '010', '2023-06-05');
    // getRmAvgData('5428883', '2023-06-05');
    // getActualSegmentBankWideData('2023-07-24', 'CORPORATE'); // DON'T USE ANOTHER DATE
    // getActualSegmentRegionData('SME', '2023-07-24', 'SO001'); // Working on this at the moment
    // getActualSegmentAreaData('SO001', 'SME','IMO001', '2023-07-24'); // OR
    // getActualSegmentAreaData('CBG001', 'Corporate','CBG001 ', '2023-07-24'); // To get for Corporate (camel case), drilldown is diff, it has CBG 1, CBG2, CBG3 etc in dropdown, so check drilldown and data coming in and work separately on everything
    // getActualSegmentBranchData('IMO001', 'SME','010', '2023-05-06');
    // getAvgSegmentBankWideData('2023-07-24', ' CORPORATE'); // Make Sure you use camel case for segment e.g. Sme, Corporate, etc
    // getAvgSegmentBankWideData('2023-07-27', 'Retail'); // Camel case for segment
    // getAvgSegmentRegionData('SME', '2023-07-27', 'SO001');
    // getAvgSegmentAreaData('SO001', 'SME', '2023-07-27');
    // getAvgSegmentBranchData('IMO001', 'SME', '2023-07-27');
    // getAvgSegmentRmData('5428883', '2023-07-27');

    getRegionList();
    getSegmentList();
    getAreaListByRegionId('SO001');
    getBranchListByAreaCode('IMO001');
    getRmByBranchCode('010');

    controller = AnimationController(vsync: this, duration: Duration(seconds: 1),);
    animation1 = CurvedAnimation(parent: controller, curve: Curves.easeIn);

    animation2 = ColorTween(begin: Colors.white12, end: Colors.black54).animate(controller);
    controller.forward();

    animation1.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        controller.reverse(from: 1.0);
      } else if (status == AnimationStatus.dismissed) {
        controller.forward();
      }
    });

    controller.addListener(() {
      setState(() {});
    });
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }


  // Geography actual...
  Future<List<MyBalanceSheetResponse>> getBankWideDepositActualData(String date) async {
    List<MyBalanceSheetResponse> bankDepData;
      bankDepData = await apiService.getBankWideDepositActual(date);
      setState(() {
        bankWideDepositActual = bankDepData;
      });
    return bankWideDepositActual;
  }

  Future<List<MyBalanceSheetResponse>> getBankWideLoanActualData(String date) async {
      List<MyBalanceSheetResponse> bankLoanData;
      bankLoanData = await apiService.getBankWideLoanActual(date);
        setState(() {
          bankWideLoanActual = bankLoanData;
        });
      return bankWideLoanActual;
  }

  Future<List<MyBalanceSheetTypeResponse>> getRegionActualData(String date, String regionName) async {
    // OneContext().showProgressIndicator();
      List<MyBalanceSheetTypeResponse> regionActualData;
      regionActualData = await apiService.getRegionActual(date, regionName);
        setState(() {
          regionActual = regionActualData;
        });
    // OneContext().hideProgressIndicator();
    return regionActualData;
  }

  Future<List<MyBalanceSheetTypeResponse>> getAreaActualData(String regionId, String area, String date) async {
      List<MyBalanceSheetTypeResponse> areaActualData;
      areaActualData = await apiService.getAreaActual(regionId, area, date);
        setState(() {
          areaActual = areaActualData;
        });
      return areaActual;
  }

  Future<List<MyBalanceSheetTypeResponse>> getBranchActualData(String zoneId, String branch, String date) async {
      List<MyBalanceSheetTypeResponse> branchActualData;
      branchActualData = await apiService.getBranchActual(zoneId, branch, date);
        setState(() {
          branchActual = branchActualData;
        });
      return branchActual;
  }

  Future<List<MyBalanceSheetRmResponse>> getRmActualData(String rmCode, String date) async {
      List<MyBalanceSheetRmResponse> rmActualData;
      rmActualData = await apiService.getRmActual(rmCode, date);
        setState(() {
          rmActual = rmActualData;
        });
      return rmActual;
  }

  // Geography Average...
  Future<List<MyBalanceSheetResponse>> getBankWideDepositAvgData(String date) async {
    List<MyBalanceSheetResponse> bankWideDepAvgData;
    bankWideDepAvgData = await apiService.getBankWideDepositAvg(date);
      setState(() {
        bankWideDepAvg = bankWideDepAvgData;
      });
    return bankWideDepAvg;
  }

  Future<List<MyBalanceSheetResponse>> getBankWideLoanAvgData(String date) async {
    List<MyBalanceSheetResponse> bankWideLoanAvgData;
    bankWideLoanAvgData = await apiService.getBankWideLoanAvg(date);
      setState(() {
        getBankWideLoanAvg = bankWideLoanAvgData;
      });
    return getBankWideLoanAvg;
  }

  Future<List<MyBalanceSheetTypeResponse>> getRegionAvgData(String regionId) async {
      List<MyBalanceSheetTypeResponse> regionAvgData;
      regionAvgData = await apiService.getRegionAvg(regionId);
        setState(() {
          regionAvg = regionAvgData;
        });
      return regionAvg;
  }

  Future<List<MyBalanceSheetTypeResponse>> getAreaAvgData(String regionId, String area,String date) async {
    List<MyBalanceSheetTypeResponse> areaAvgData;
    areaAvgData = await apiService.getAreaAvg(regionId, area, date);
      setState(() {
        areaAvg = areaAvgData;
      });
    return areaAvg;
  }

  // Not working = check AleroApiService
  Future<List<MyBalanceSheetTypeResponse>> getBranchAvgData(String zoneId, String branchCode, String date) async {
    List<MyBalanceSheetTypeResponse> branchAvgData;
    branchAvgData = await apiService.getBranchAvg(zoneId, branchCode, date);
      setState(() {
        branchAvg = branchAvgData;
      });
    return branchAvg;
  }

  Future<List<MyBalanceSheetRmResponse>> getRmAvgData(String rmCode, String date) async {
    List<MyBalanceSheetRmResponse> rmAvgData;
    rmAvgData = await apiService.getRmAvg(rmCode, date);
      setState(() {
        rmAvg = rmAvgData;
      });
    return rmAvg;
  }

  // Segment Actual..
  Future<List<MyBalanceSheetResponse>> getActualSegmentBankWideData(String date, String segment) async {
    List<MyBalanceSheetResponse> segmentBankWideData;
    segmentBankWideData = await apiService.getActualSegmentBankWide(date, segment);
      setState(() {
        segmentBankWide = segmentBankWideData;
      });
    return segmentBankWide;
  }

  Future<List<MyBalanceSheetRmResponse>> getActualSegmentRegionData(String segment, String runDate, String regionCode) async {
      List<MyBalanceSheetRmResponse> actualSegmentRegionData;
      actualSegmentRegionData = await apiService.getActualSegmentRegion(segment, runDate, regionCode);
        setState(() {
          actualSegmentRegion = actualSegmentRegionData;
        });
      return actualSegmentRegion;
  }

  Future<List<MyBalanceSheetRmResponse>> getActualSegmentAreaData(String regionCode, String segment, String areaId, String date) async {
      List<MyBalanceSheetRmResponse> actualSegmentAreaData;
      actualSegmentAreaData = await apiService.getActualSegmentArea(regionCode, segment, areaId, date);
        setState(() {
          actualSegmentArea = actualSegmentAreaData;
        });
      return actualSegmentArea;
  }

  Future<List<MyBalanceSheetRmResponse>> getActualSegmentBranchData(String areaCode, String segment, branchCode, runDate) async {
        List<MyBalanceSheetRmResponse> actualSegmentBranchData;
        actualSegmentBranchData = await apiService.getActualSegmentBranch(areaCode, segment, branchCode, runDate);
          setState(() {
            actualSegmentBranch = actualSegmentBranchData;
          });
        return actualSegmentBranch;
  }

  // Segment Average...
  Future<List<MyBalanceSheetResponse>> getAvgSegmentBankWideData(String date, String segment) async {
    List<MyBalanceSheetResponse> avgSegmentBankWideData;
    avgSegmentBankWideData = await apiService.getAvgSegmentBankWide(date, segment);
    setState(() {
      avgSegmentBankWide = avgSegmentBankWideData;
    });
    return avgSegmentBankWide;
  }

  Future<List<MyBalanceSheetRmResponse>> getAvgSegmentRegionData(String segment, String date, String regionCode) async {
    List<MyBalanceSheetRmResponse> avgSegmentRegionData;
    avgSegmentRegionData = await apiService.getAvgSegmentRegion(segment, date, regionCode);
    setState(() {
      avgSegmentRegion = avgSegmentRegionData;
    });
    return avgSegmentRegion;
  }

  Future<List<MyBalanceSheetRmResponse>> getAvgSegmentAreaData(String division, String segment, String date) async {
    List<MyBalanceSheetRmResponse> avgSegmentAreaData;
    avgSegmentAreaData = await apiService.getAvgSegmentArea(division, segment, date);
    setState(() {
      avgSegmentArea = avgSegmentAreaData;
    });
    return avgSegmentArea;
  }

  Future<List<MyBalanceSheetRmResponse>> getAvgSegmentBranchData(String cluster, String segment, String date) async {
      List<MyBalanceSheetRmResponse> avgSegmentBranchData;
      avgSegmentBranchData = await apiService.getAvgSegmentBranch(cluster, segment, date);
      setState(() {
        avgSegmentBranch = avgSegmentBranchData;
      });
      return avgSegmentBranch;
  }

  Future<List<MyBalanceSheetRmResponse>> getAvgSegmentRmData(String rmCode, String date) async {
      List<MyBalanceSheetRmResponse> avgSegmentRmData;
      avgSegmentRmData = await apiService.getRmAvg(rmCode, date);
      setState(() {
        avgSegmentRm = avgSegmentRmData;
      });
      return avgSegmentRm;
  }

  String measureType = 'Actual';
  bool hoverColor = false;

  bool isActive = false;
  bool active = false;

  bool isColor = false;
  int position = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBody: true,
      drawer: Theme(
        data: Theme.of(context).copyWith(
          canvasColor: Colors.lightBlue.shade50, // This will change the drawer background to blue.
        ),
        child: BalanceSheetSideMenu(
          isActive: isActive,
          active: active,
          tap : () {
            setState(() {
              active = true;
              isActive = false;
            });},
            ontap: () {
              setState(() {
                active = false;
                isActive = true;
              });}
        ),
      ),
       resizeToAvoidBottomInset: false,
       body: SafeArea(
          child: SingleChildScrollView(
            physics: AlwaysScrollableScrollPhysics(),
            child: Padding(
              padding: EdgeInsets.only(left: 10, top: 12, right: 5),
              child: Column(
                  children: [
                    Container(
                      height: 40,
                      color: Style.Colors.searchActiveBg,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Row(
                            children: [
                              Builder(
                                  builder: (context) {
                                    return GestureDetector(
                                      onTap: () =>
                                          Scaffold.of(context).openDrawer(),
                                      child: Padding(
                                        padding: const EdgeInsets.only(top: 13.0, left: 10),
                                        child: Icon(EvaIcons.menu2Outline, color: Colors.black38.withOpacity(0.5),
                                          size: 28,
                                        ),
                                      ),
                                    );
                                  }
                               ),
                              Padding(
                                padding: const EdgeInsets.only(top: 10.0),
                                child: Row(
                                  children: [
                                    Icon(Icons.arrow_right_alt, size: 30,
                                        color: animation2.value),
                                    Text('slide',
                                        style: TextStyle(
                                            fontSize: 13,
                                            color: animation2.value,
                                            fontFamily: 'Poppins-Regular'))
                                  ],
                                ),
                              ),
                            ],
                          ),
                         Padding(
                           padding: const EdgeInsets.only(right: 16.0),
                           child: IconButton(
                             icon: Icon(Icons.home),
                             color: Colors.black54,
                             iconSize: 30.0,
                             onPressed: () {
                               Navigator.of(context)
                                   .pushNamedAndRemoveUntil(
                                   '/landing', (Route<dynamic> route) => false);
                             },
                           ),)
                        ],
                      ),
                    ),
                    SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        Text('My Balance Sheet',
                          style: TextStyle(
                            color: Colors.lightBlue,
                            fontSize: 18.0,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Poppins-Regular',
                          ),),
                        Padding(
                          padding: const EdgeInsets.only(left: 5.0),
                          child: Container(
                            padding: EdgeInsets.all(7.0),
                            decoration: BoxDecoration(
                                color: Colors.black38,
                                borderRadius: BorderRadius.circular(8.0)),
                            child: Text(isActive == true ? 'ACTUAL' : 'AVERAGE' ?? measureType,
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 12.0,
                                fontWeight: FontWeight.w600,
                                fontFamily: 'Poppins-Regular',
                              ),),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 15),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        PopupMenuButton<String>(
                          itemBuilder: (context) {
                            return regionList.map((item) {
                              return PopupMenuItem(
                                value: item,
                                child: Text(item),
                              );
                            }).toList();
                          },
                          // await getRegionAvgData('SO001');
                          // getBankWideLoanActualData('2023-05-06');
                          child: Container(
                            padding: EdgeInsets.all(10),
                            height: 35,
                            width: 140,
                            decoration: BoxDecoration(
                                // color: hoverColor == false ? Colors.lightBlueAccent.shade400 : Colors.grey,
                                color: Colors.lightBlueAccent.shade400,
                                borderRadius: BorderRadius.circular(10)),
                            /* child: InkWell(
                              onTap: () => null,
                              onHover: (hover) =>
                                setState(() =>
                                  hoverColor = hover
                                ),*/
                              child: Row(
                                children: <Widget>[
                                  Text(regionType == null ? 'View by Region'
                                      : regionType != null && areaByRegion == null ? 'View by Area'
                                      : regionType != null && areaByRegion != null && branchByArea == null ? 'View by Branch'
                                      : regionType != null && areaByRegion != null && branchByArea != null && rmByBranch == null ? 'View by Rm'
                                      : ' ',
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold)),
                                  Icon(Icons.arrow_drop_down,
                                      color: Colors.white,
                                      size: 23),
                                ],
                              ),
                            // ),
                          ),
                          onSelected: (item) {
                            setState(() async {
                              regionType = item;
                              await getRegionActualData('2023-05-06', regionType);
                              visible = false;
                              isRegion = true;
                            });
                          },
                        ),
                        SizedBox(width: 7),
                        PopupMenuButton<String>(
                          itemBuilder: (context) {
                            return segmentList.map((item) {
                              return PopupMenuItem(
                                value: item,
                                child: Text(item),
                              );
                            }).toList();
                          },
                          child: Container(
                            padding: EdgeInsets.all(10),
                            height: 35,
                            width: 152,
                            decoration: BoxDecoration(
                                // color: tapColor == false ? Colors.lightBlueAccent.shade200 : Colors.grey,
                                color: Colors.lightBlueAccent.shade200,
                                borderRadius: BorderRadius.circular(10)),
                            /*child: InkWell(
                              onTap: () => setState(() {
                                tapColor = true;
                              }),*/
                              child: Row(
                                children: <Widget>[
                                  Text(segmentType == null ? 'View by Segment'
                                      : segmentType != null ? 'Other Segment' // View by Region = regionList and Other segment = segmentList minus selectedSegent
                                      : 'Other Segment',
                                      style: TextStyle(
                                          color: Colors.white, fontWeight: FontWeight.bold)),
                                  Icon(Icons.arrow_drop_down,
                                      color: Colors.white,
                                      size: 23),
                                ],
                              ),
                            // ),
                          ),
                          onSelected: (item) {
                            setState(() async {
                              segmentType = item;
                              await getActualSegmentBankWideData('2023-07-24', 'CORPORATE'); // DON'T USE ANOTHER DATE
                              await getActualSegmentRegionData(segmentType, '2023-05-06', regionType);
                              await getActualSegmentAreaData('HE001' ?? 'SO001' ?? 'NO001', segmentType, 'IMO001' ?? 'DEL001' ?? 'ABJ002' ?? 'ABJ003', '2023-05-06');
                              await getActualSegmentBranchData('IMO001' ?? 'DEL001' ?? 'ABJ002' ?? 'ABJ003', regionType, '010', '2023-05-06');
                              isNotVisible = true;
                              visible = false;
                              isRegion = false;
                            });
                          },
                        ),
                      ],
                    ),
                    SizedBox(height: 15),
                    PmTitleContainer(
                      subTitle: regionType,
                        subText: segmentType,
                        selectedDate: selectedDate,
                        bankDate: bankDate,
                        selectDateFunction: () {
                          setState(() {
                            _selectDate(context);
                          });
                    }
                  ),
                  SizedBox(height: 20),
                  Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(5))
                    ),
                    elevation: 5,
                     /*Container(
                      padding: EdgeInsets.symmetric(horizontal: 5),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.all(
                            Radius.circular(10)),*/
                        /*border: Border(
                          top: BorderSide(
                            color: Colors.black45,
                            width: 1.0,
                          ),),*/
                   child: balanceSheetContainer(context)
                 ),
                ],
              ),
            ),
          ),
        ),
      bottomNavigationBar: SafeArea(
          child: Container(
            padding: const EdgeInsets.all(16),
            margin: const EdgeInsets.symmetric(horizontal: 50, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.lightBlue.shade50,
              borderRadius: BorderRadius.all(Radius.circular(26)),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () {
                    setState(() {
                      position = 0;
                    });
                  },
                  child: Stack(
                    children: [
                      InkWell(
                        child: SvgPicture.asset(
                          'assets/customer/profile_dashboard.svg',
                        ),
                        onTap: () {
                          Navigator.of(context)
                              .pushNamedAndRemoveUntil(
                              '/landing', (Route<dynamic> route) => false);
                          setState(() {
                            position = 0;
                          });
                        },
                        onHover: (color) {
                          setState(() {
                            isColor = color;
                          });
                        },
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 30.0),
                        child: AnimatedContainer(
                            duration: const Duration(milliseconds: 200),
                            child: Container(
                              height: 3,
                              width: position == 0 ? 26 : 0,
                              decoration: BoxDecoration(color: Colors.lightBlueAccent.shade400.withOpacity(0.8),
                                  borderRadius: BorderRadius.all(Radius.circular(15))),
                            )),
                      ),
                    ],
                  ),
                ),
          GestureDetector(
            onTap: () {
              setState(() {
                position = 1;
              });
            },
            child: Stack(
              children: [
                InkWell(
                  child: SvgPicture.asset(
                    'assets/customer/profile_logout.svg',
                  ),
                  onTap: () {
                    logoutUser(context);
                  },
                ),
                Padding(
                  padding: const EdgeInsets.only(top: 30.0),
                  child: AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      child: Container(
                        height: 3,
                        width: position == 1 ? 25 : 0,
                        decoration: BoxDecoration(color: Colors.lightBlueAccent.shade400.withOpacity(0.8),
                            borderRadius: BorderRadius.all(Radius.circular(12))),
                      )),
                ),
              ],
            ),
          )
          ],
        ),
      )));
  }

  void logoutUser(BuildContext context) async {
    var apiService = AleroAPIService();
    var response;
    OneContext().showProgressIndicator();
    try {
      OneContext().hideProgressIndicator();
      response = await apiService.logoutUser();
      if (response != null) {
        Navigator.of(context)
            .pushNamedAndRemoveUntil('/login', (Route<dynamic> route) => false);
        OneContext().hideProgressIndicator();
      }
    } catch (error) {
      print(error);
      OneContext().hideProgressIndicator();
    }
  }

  Widget balanceSheetContainer(BuildContext context) {
    if (isRegion == true && regionType == null && segmentType == null && regionList == null) {
      MyBalanceSheetTableContainer(
          balanceSheetData: bankWideDepositActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == true && regionType != null && segmentType == null && regionList != null) {
      MyBalanceSheetTableContainer(
          balanceSheetData: regionActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == true && regionType != null && segmentType == null && areaByRegion != null) {
      MyBalanceSheetTableContainer(
          balanceSheetData: areaActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == true && regionType != null && segmentType == null && branchByArea != null) {
      MyBalanceSheetTableContainer(
          balanceSheetData: regionActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == true && regionType != null && segmentType == null && rmByBranch != null) {
      return MyBalanceSheetTableContainer(
          balanceSheetData: rmActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == false && segmentType != null && regionList != null) {
      return MyBalanceSheetTableContainer(
          balanceSheetData: actualSegmentRegion,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == false && segmentType != null && areaByRegion != null) {
    // } else if (isRegion == false && segmentType != null && (areaByRegion != null ?? areaByRegio != null)) {
      return MyBalanceSheetTableContainer(
          balanceSheetData: actualSegmentArea,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == false && segmentType != null && branchByArea != null) {
    // } else if (isRegion == false && segmentType != null && (branchByArea != null ?? branchByAre != null)) {
      return MyBalanceSheetTableContainer(
          balanceSheetData: actualSegmentBranch,
          bankDate: bankDate,
          selectedDate: selectedDate);
    } else if (isRegion == false && segmentType != null && rmByBranch != null) {
    // } else if (isRegion == false && segmentType != null && (rmByBranch != null ?? rmByBranc != null)) {
      return MyBalanceSheetTableContainer(
          balanceSheetData: rmActual,
          bankDate: bankDate,
          selectedDate: selectedDate);
    }
  }
}


/*
isRegion == true
     ? regionType == null && segmentType == null
        ? MyBalanceSheetTableContainer(
             balanceSheetData: bankWideDepositActual,
             bankDate: bankDate,
             selectedDate: selectedDate) : Text('')
         : regionType != null && segmentType == null
             ? regionList != null
              ? MyBalanceSheetTableContainer(
              balanceSheetData: regionActual,
              bankDate: bankDate,
              selectedDate: selectedDate)
              : areaByRegion != null ?
          MyBalanceSheetTableContainer(
              balanceSheetData: areaActual,
              bankDate: bankDate,
              selectedDate: selectedDate)
              : branchByArea != null ?
          MyBalanceSheetTableContainer(
              balanceSheetData: regionActual,
              bankDate: bankDate,
              selectedDate: selectedDate)
              : rmByBranch != null ?
          MyBalanceSheetTableContainer(
              balanceSheetData: rmActual,
              bankDate: bankDate,
              selectedDate: selectedDate) : Text('')

  :
    segmentType != null
      ? regionList != null
        ? MyBalanceSheetTableContainer(
        balanceSheetData: actualSegmentRegion,
        bankDate: bankDate,
        selectedDate: selectedDate)
        : areaByRegion != null ?
    MyBalanceSheetTableContainer(
        balanceSheetData: actualSegmentArea,
        bankDate: bankDate,
        selectedDate: selectedDate)
        : branchByArea != null ?
    MyBalanceSheetTableContainer(
        balanceSheetData: actualSegmentBranch,
        bankDate: bankDate,
        selectedDate: selectedDate)
        : rmByBranch != null ?
    MyBalanceSheetTableContainer(
        balanceSheetData: rmActual,
        bankDate: bankDate,
        selectedDate: selectedDate)
        : MyBalanceSheetTableContainer(
        balanceSheetData: rmActual,
        bankDate: bankDate,
        selectedDate: selectedDate)


isRegion == true
                        ? isActive == true && regionType == null && segmentType == null
                          ? MyBalanceSheetTableContainer(
                            balanceSheetData: bankWideDepositActual,
                            bankDate: bankDate,
                            selectedDate: selectedDate)
                          : regionType != null && segmentType == null
                          ? regionList != null
                            ? MyBalanceSheetTableContainer(
                             balanceSheetData: regionActual,
                             bankDate: bankDate,
                             selectedDate: selectedDate)
                             : areaByRegion != null ?
                                MyBalanceSheetTableContainer(
                                  balanceSheetData: areaActual,
                                  bankDate: bankDate,
                                  selectedDate: selectedDate)
                              : branchByArea != null ?
                                MyBalanceSheetTableContainer(
                                    balanceSheetData: regionActual,
                                    bankDate: bankDate,
                                    selectedDate: selectedDate)
                               : rmByBranch != null ?
                                MyBalanceSheetTableContainer(
                                    balanceSheetData: rmActual,
                                    bankDate: bankDate,
                                    selectedDate: selectedDate)

                      : segmentType != null ?
                          regionList != null
                              ? MyBalanceSheetTableContainer(
                              balanceSheetData: actualSegmentRegion,
                              bankDate: bankDate,
                              selectedDate: selectedDate)
                              : areaByRegion != null ?
                          MyBalanceSheetTableContainer(
                              balanceSheetData: actualSegmentArea,
                              bankDate: bankDate,
                              selectedDate: selectedDate)
                              : branchByArea != null ?
                          MyBalanceSheetTableContainer(
                              balanceSheetData: actualSegmentBranch,
                              bankDate: bankDate,
                              selectedDate: selectedDate)
                              : rmByBranch != null ?
                          MyBalanceSheetTableContainer(
                              balanceSheetData: rmActual,
                              bankDate: bankDate,
                              selectedDate: selectedDate)
                       : MyBalanceSheetTableContainer(
                              balanceSheetData: rmActual,
                              bankDate: bankDate,
                              selectedDate: selectedDate)


isActive == true ? regionType == null && segmentType == null ?
                      MyBalanceSheetTableContainer(
                        balanceSheetData: bankWideDepositActual,
                        bankDate: bankDate,
                        selectedDate: selectedDate)
                          : segmentType != null ? MyBalanceSheetTableContainer(
                          balanceSheetData: actualSegmentRegion,
                          bankDate: bankDate,
                          selectedDate: selectedDate)
                          : MyBalanceSheetTypeContainer(balanceSheetData: regionActual)

                          :
                      regionType == null && segmentType == null ?
                        MyBalanceSheetTableContainer(
                            balanceSheetData: bankWideDepAvg,
                            bankDate: bankDate,
                            selectedDate: selectedDate
                        )
                        : segmentType != null
                        ? MyBalanceSheetTableContainer(
                        balanceSheetData: avgSegmentRegion,
                        bankDate: bankDate,
                        selectedDate: selectedDate
                       ) : MyBalanceSheetTypeContainer(
                        balanceSheetData: regionAvg,
                      ),*/




















































/*// For actual
  Future<List<MyBalanceSheetResponse>> getBankActualOrAverageForDeposit(String date) async {
    if (!hasLoaded) {
      List<MyBalanceSheetResponse> bankDepData;
      if (!isReportValue) {
        bankDepData = await apiService.getBankActualDepositData('2023-05-06');
        setState(() {
          scorecards = bankDepData;
        });
      }
      else {
        bankDepData = await apiService.getBankAverageDepositData('2023-05-06');
        setState(() {
          scorecards = bankDepData;
        });
      }
    if (mounted) {
      setState(() {
        hasLoaded = true;
      });
    }
    return bankDepData;
  }}

  // For average
 Future<List<MyBalanceSheetResponse>> getBankActualOrAverageForLoan(String date) async {
   if (!hasLoaded) {
     List<MyBalanceSheetResponse> bankLoanData;
      if (!isReportValue) {
        bankLoanData = await apiService.getBankActualLoanData('2023-05-06');
        setState(() {
          scorecards = bankLoanData;
        });
      }
      else {
        bankLoanData = await apiService.getBankAverageLoanData('2023-05-06');
        setState(() {
          scorecards = bankLoanData;
        });
      }
     if (mounted) {
       setState(() {
         hasLoaded = true;
       });
     }
      return bankLoanData;
  }}

  List<String> areaList = [
    'Area 1',
    'Area 2',
    'Area 3',
    'Area 4',
    'Area 5',
    'Area 6',
  ];
*/



// List<dynamic> _bankDepData;

/*
@override
void initState() {
  super.initState();
  getBankActualOrAverageForDeposit('2023-05-06');
  getBankActualOrAverageForLoan('2023-05-06');
  */
/* getBankActualOrAverageForLoan('SO001','DELTA', '2023-05-06');
     getRegionActualOrAverage(date);
     getAreaActualOrAverage(regionId, area, date);
     getBranchActualOrAverage(zoneId, branch, date);
     getRmActualOrAverage(rmCode, date);*//*

  bankDate = DateFormat('yyyy-MM-dd').format(DateTime.now());
  bankStartDate = DateFormat('yyyy-MM-dd')
      .format(DateTime.parse(DateTime(startDate.year, startDate.month, startDate.day - 1).toString()));
}
*/


/*onTapRegion: () {
                    setState(() {
                      regionList = areaList;
                      regionType = areaType;
                    });
                  },*/

/*
  Future getBankActualOrAverage(String date) async {
    if (!hasLoaded) {
      List<dynamic> bankDepData;
      List<dynamic> bankLoanData;
      if (!isReportValue) {
        bankDepData = await apiService.getBankActualDepositData(date);
        bankLoanData = await apiService.getBankActualLoanData(date);
      }
      else {
        bankDepData = await apiService.getBankAverageDepositData(date);
        bankLoanData = await apiService.getBankAverageLoanData(date);
      }
      count = [];
      if (bankDepData.isEmpty && bankLoanData.isEmpty) {
        if (mounted) {
          setState(() {
            hasData = false;
          });
        }
      } else {
        if (mounted) {
          setState(() {
            hasData = true;
          });
        }
        bankDepData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
        bankDepData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
      }
      return bankDepData ?? bankLoanData;
    }
  }
*/


// _bankDepData = await apiService.getBankAverageDepositData(date = selectedDate);
// _bankDepData = await apiService.getBankAverageDepositData(date = selectedDate ?? bankStartDate);

/*reportOnSearch.isEmpty ?
    Center(
      child: Text("No results found",
        style: TextStyle(
          fontSize: 20, fontWeight: FontWeight.bold,
          color: Colors.black54,
      ),
    ),) :*/

/*// Region (Other) For both deposit and Loan
  Future getRegionActualOrAverage(String date) async {
    if (!hasLoaded) {
      var _regionData;
      if (!isReportValue) {
        _regionData = await apiService.getRegionActualData(date);
        setState(() {
          scorecard = _regionData;
        });
      }
      else {
        _regionData = await apiService.getRegionAverageData(date);
      }
      count = [];
      if (_regionData.isEmpty) {
        if (mounted) {
          setState(() {
            hasData = false;
          });
        }
      } else {
        if (mounted) {
          setState(() {
            hasData = true;
          });
        }
        _regionData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
      }
      return _regionData;
    }
  }

  Future<dynamic> getAreaActualOrAverage(String regionId, String area, String date) async {
    if (!hasLoaded) {
      var _areaData;
      if (!isReportValue) {
        _areaData = await apiService.getAreaActualData(regionId = 'SO001', area = 'DELTA', date = '2023-05-06');
        setState(() {
          scorecard = _areaData;
        });
      }
      else {
        _areaData = await apiService.getAreaAverageData(regionId = 'SO001', area = 'DELTA', date = '2023-05-06');
      }
      count = [];
      if (_areaData.isEmpty) {
        if (mounted) {
          setState(() {
            hasData = false;
          });
        }
      } else {
        if (mounted) {
          setState(() {
            hasData = true;
          });
        }
        _areaData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
      }
      return _areaData;
    }
  }

  // Branch (For both Deposit and Loan)
  Future getBranchActualOrAverage(String zoneId, String branch, String date) async {
    if (!hasLoaded) {
      var _branchData;
      if (!isReportValue) {
        _branchData = await apiService.getBranchActualData(zoneId, branch, date);
        setState(() {
          scorecard = _branchData;
        });
      }
      else {
        _branchData = await apiService.getBranchAverageData(zoneId, branch, date);
      }
      count = [];
      if (_branchData.isEmpty) {
        if (mounted) {
          setState(() {
            hasData = false;
          });
        }
      } else {
        if (mounted) {
          setState(() {
            hasData = true;
          });
        }
        _branchData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
      }
      return _branchData;
    }
  }

  // Rm (For both Deposit and Loan)
  Future getRmActualOrAverage(String rmCode, String date) async {
    if (!hasLoaded) {
      var _rmData;
      if (!isReportValue) {
        _rmData = await apiService.getRmActualData(rmCode, date);
      }
      else {
        _rmData = await apiService.getRmAverageData(rmCode, date);
      }
      count = [];
      if (_rmData.isEmpty) {
        if (mounted) {
          setState(() {
            hasData = false;
          });
        }
      } else {
        if (mounted) {
          setState(() {
            hasData = true;
          });
        }
        _rmData.forEach((counter) {
          count.add(ScorecardResponse(
            position: counter['position'],
            productCategory: counter['productCategory'],
            product: counter['counter'],
            currentBalance: counter['currentBalance'],
            previousBal: counter['previousBal'],
            variance: counter['variance'],
            monthEndBalance: counter['monthEndBalance'],
            varianceFromMonthEnd: counter['varianceFromMonthEnd'],
            budget: counter['budget'],
            varianceFromBudget: counter['varianceFromBudget'],
            achievementPercent: counter['achievementPercent'],
          ));
        });
      }
      return _rmData;
    }
  }
*/



